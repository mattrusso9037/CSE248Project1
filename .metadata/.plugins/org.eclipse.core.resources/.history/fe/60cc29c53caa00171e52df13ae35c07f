package Main;

import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class FrontWindowTerminalView extends ValetTerminalView {

	private HBox a;

	@Override
	public void start(Stage employee) throws Exception {
		BorderPane borderPane = new BorderPane();
		VBox vbox = new VBox();
		HBox welcomeBox = new HBox();
		VBox slotNumberFieldBox = new VBox();
		VBox footer = new VBox();
		HBox carSpots1 = new HBox();
		HBox carSpots2 = new HBox();
		HBox carSpots3 = new HBox();
		VBox spots = new VBox();
		a = null;
		HBox b=null, c=null, d=null, e=null, f=null, g=null, h=null, i=null, j=null, k=null, l=null,
				m=null, n=null, o=null, p=null, q=null, r=null, s=null, t=null, u=null, v=null, w=null,
				x=null, y=null, z=null, a1=null, b1=null, c1=null, d1=null;
		// live view space boxes
		Label aa = new Label("1");
		a.getChildren().add(aa);

		Label bb = new Label("2");
		b.getChildren().add(bb);

		Label cc = new Label("3");
		c.getChildren().add(cc);

		Label dd = new Label("4");
		d.getChildren().add(dd);

		Label ee = new Label("5");
		e.getChildren().add(ee);

		Label ff = new Label("6");
		f.getChildren().add(ff);

		Label gg = new Label("7");
		g.getChildren().add(gg);

		Label hh = new Label("8");
		h.getChildren().add(hh);

		Label ii = new Label("9");
		i.getChildren().add(ii);

		Label jj = new Label("10");
		j.getChildren().add(jj);

		Label kk = new Label("11");
		k.getChildren().add(kk);

		Label ll = new Label("12");
		l.getChildren().add(ll);

		Label mm = new Label("13");
		m.getChildren().add(mm);

		Label nn = new Label("14");
		n.getChildren().add(nn);

		Label oo = new Label("15");
		o.getChildren().add(oo);

		Label pp = new Label("16");
		p.getChildren().add(pp);

		Label qq = new Label("17");
		q.getChildren().add(qq);

		Label rr = new Label("18");
		r.getChildren().add(rr);

		Label ss = new Label("19");
		s.getChildren().add(ss);

		Label tt = new Label("20");
		t.getChildren().add(tt);

		Label uu = new Label("21");
		u.getChildren().add(uu);

		Label vv = new Label("22");
		v.getChildren().add(vv);

		Label ww = new Label("23");
		w.getChildren().add(ww);

		Label xx = new Label("24");
		x.getChildren().add(xx);

		Label yy = new Label("25");
		y.getChildren().add(yy);

		Label zz = new Label("26");
		z.getChildren().add(zz);

		Label aa1 = new Label("27");
		a1.getChildren().add(aa1);

		Label bb1 = new Label("28");
		b1.getChildren().add(bb1);

		Label cc1 = new Label("29");
		c1.getChildren().add(cc1);

		Label dd1 = new Label("30");
		d1.getChildren().add(dd1);
		
		HBox[] boxArray = { a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a1, b1, c1,
				d1 };

		
	//Conditional formatting for car spaces
		for (int arrayIterator = 0; arrayIterator < boxArray.length; arrayIterator++) {

			if (Lot.getLot().vehiclesMap.containsKey(String.valueOf(arrayIterator + 1))) {

				boxArray[arrayIterator].setStyle("-fx-background-color: red");

			} else {

				boxArray[arrayIterator].setStyle("-fx-background-color: green");

			}
		}


		spots.setSpacing(3);
		carSpots1.setSpacing(3);
		carSpots1.getChildren().addAll(a, b, c, d, e, f, g, h, i, j);
		carSpots2.setSpacing(3);
		carSpots2.getChildren().addAll(k, l, m, n, o, p, q, r, s, t);
		carSpots3.setSpacing(3);
		carSpots3.getChildren().addAll(u, v, w, x, y, z, a1, b1, c1, d1);
		spots.getChildren().addAll(carSpots1, carSpots2, carSpots3);
		HBox spotBox = new HBox();
		spotBox.getChildren().addAll(spots);
		spotBox.setAlignment(Pos.CENTER);
		spotBox.setPadding(new Insets(50, 0, 0, 0));

		Button searchButton = new Button("search");
		Label spaceNumberText = new Label("space number");
		Label returnTimeText = new Label("return time");

		// top
		welcomeBox.setMinHeight(200);
		welcomeBox.setPadding(new Insets(100, 0, 100, 0));
		Text welcomeText = new Text("Enter ticket information below");
		welcomeBox.getChildren().addAll(welcomeText);
		welcomeBox.setAlignment(Pos.CENTER);

		// middle
		slotNumberFieldBox.setMinWidth(700);
		slotNumberFieldBox.setSpacing(50);
		TextField slotNumberEntry = new TextField();
		slotNumberEntry.setMaxWidth(100);
		TextField returnTimeEntry = new TextField();

		returnTimeEntry.setMaxWidth(100);
		slotNumberFieldBox.setSpacing(5);
		slotNumberFieldBox.getChildren().addAll(slotNumberEntry, spaceNumberText, searchButton, spotBox);
		slotNumberFieldBox.setId("slotNumberFieldBox");

		Text carRateText = new Text("The rate for cars is $25 per hour");
		Text bikeRateText = new Text("The rate for motorcycles is $20 per hour");
		Text truckRateText = new Text("The rate for trucks is $30 per hour");
		Text allDayRateText = new Text("The all day rate (12 hours) for any vehicle is $150");

		footer.setId("footer");
		footer.getChildren().addAll(carRateText, bikeRateText, truckRateText, allDayRateText);

		searchButton.setOnAction(action -> {

			if (Lot.getLot().vehiclesMap.isEmpty() || slotNumberEntry.getText().isEmpty()) {
				System.out.println("not found");
			} else {
				Lot.getLot().findVehicleById(slotNumberEntry.getText());
				Lot.getLot().value.display();

				Alert details = new Alert(AlertType.CONFIRMATION);
				details.setTitle("Confirmation");
				details.setContentText("Spot Number: " + Lot.getLot().value.getSlotNumber() + "\nCustomer Owes: $"
						+ Lot.getLot().value.getPrice());
				details.show();

				// if time now > return time add $100
				// if(Integer.parseInt(Lot.getLot().value.getNow()) >
				// Integer.parseInt(Lot.getLot().value.getReturnTime(Lot.getLot().value.getHours())))
				// {
				// Lot.getLot().value.setPrice(Lot.getLot().value.getPrice() +
				// 100);
				//
				// }

				Lot.getLot().vehiclesMap.remove(slotNumberEntry.getText());

				Platform.runLater(new Runnable() {

					@Override
					public void run() {

						try {
							new FrontWindowTerminalView().start(employee);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						;

					}

				});

				slotNumberEntry.clear();
			}
		});

		// footer
		vbox.setMinSize(employee.getWidth(), employee.getHeight());
		borderPane.getChildren().addAll(vbox);
		borderPane.setBottom(footer);
		borderPane.setTop(welcomeBox);
		borderPane.setCenter(slotNumberFieldBox);
		Scene scene = new Scene(borderPane, 700, 750);
		scene.getStylesheets().add("/main/style.css");
		FrontWindowTerminalView.class.getResource("/main/style.css").toExternalForm();

		employee.setTitle("Front Window Terminal");
		employee.setX(700);
		employee.setY(0);
		employee.setScene(scene);
		employee.show();
	}

}
